/* Overview of available data types: https://learn.microsoft.com/en-us/windows/win32/midl/midl-data-types */
import "oaidl.idl";

cpp_quote("")
cpp_quote("#ifdef __cplusplus")
cpp_quote("} // extern \"C\"")
cpp_quote("")
cpp_quote("#include <atlbase.h> // for CComBSTR")
cpp_quote("#include <atlsafe.h> // for CComSafeArray")
cpp_quote("")
cpp_quote("extern \"C\"{")
cpp_quote("#endif")
cpp_quote("")

typedef [
 v1_enum, // 32bit enum size
 helpstring("")]
enum Severity {
    Unknown_,
    Info,
    Warning,
    Error,
    Fatal,
} Severity;

cpp_quote("")
cpp_quote("#ifndef __cplusplus")

typedef [
 helpstring("Dummy message")]
struct Message {
    Severity sev;

    [helpstring("message creation time")]
    DATE time;

    [helpstring("some value")]
    double value;

    [helpstring("description")]
    BSTR desc;

    [helpstring("color (r,g,b)")]
    byte color[3];

    [helpstring("data payload)")]
    SAFEARRAY(byte) data;
} Message;

cpp_quote("")
cpp_quote("#else // __cplusplus")
cpp_quote("} // extern \"C\"")
cpp_quote("")
cpp_quote("struct Message {")
cpp_quote("    Severity sev{};")
cpp_quote("    DATE time{};")
cpp_quote("    double value{};")
cpp_quote("    CComBSTR desc; ///< BSTR wrapper")
cpp_quote("    byte color[3]{};")
cpp_quote("    SAFEARRAY * data = nullptr;")
cpp_quote("")
cpp_quote("    ~Message() {")
cpp_quote("        if (data) {")
cpp_quote("            CComSafeArray<BYTE> tmp;")
cpp_quote("            tmp.Attach(data);")
cpp_quote("            data = nullptr;")
cpp_quote("        }")
cpp_quote("    }")
cpp_quote("};")
cpp_quote("")
cpp_quote("extern \"C\"{")
cpp_quote("#endif")


/** Copied as-is from "winrt\hstring.idl" */
typedef struct HSTRING__ {
    int unused;
} HSTRING__;
typedef [wire_marshal(wireBSTR), unique] HSTRING__* HSTRING;

/** Copied as-is from "winrt\inspectable.idl" */
typedef [v1_enum] enum TrustLevel {
    BaseTrust,
    PartialTrust,
    FullTrust
} TrustLevel;

/** Copied as-is from "winrt\inspectable.h" */
[object, uuid(AF86E2E0-B12D-4c6a-9C5A-D7AA65101E90), pointer_default(unique)]
interface IInspectable : IUnknown {
    HRESULT GetIids([out] ULONG* iidCount, [out, size_is(, *iidCount)] IID** iids);
    HRESULT GetRuntimeClassName([out] HSTRING* className);
    HRESULT GetTrustLevel([out] TrustLevel* trustLevel);
};

/** Copied with simplifications from "winrt\windows.foundation.idl" */
[uuid(30D5A829-7FA4-4026-83BB-D75BAE4EA99E)]
interface IClosable : IInspectable {
    HRESULT Close();
};

[object,
 oleautomation,
 uuid(BE3FF6C1-94F5-4974-913C-237C9AB29679),
 helpstring("Client callback interface")]
interface IMyClient : IUnknown {
    [helpstring("Send message to client")]
    HRESULT XmitMessage([in] Message * message);
};

[object,
 oleautomation,
 uuid(B5506675-17E0-4709-A31A-305E36D0E2FA),
 helpstring("Number crunching interface")]
interface INumberCruncher : IUnknown {
    [helpstring("Compute the value of pi")]
    HRESULT ComputePi([out, retval] double *ret);
};

[object,
 oleautomation,
 uuid(F586D6F4-AF37-441E-80A6-3D33D977882D),
 helpstring("Server interface")]
interface IMyServer : IUnknown {
    [helpstring("Test method")]
    HRESULT GetNumberCruncher([out,retval] INumberCruncher** obj);

    [helpstring("Subscribe to callbacks")]
    HRESULT Subscribe([in] IMyClient* client);

    [helpstring("Unsubscribe to callbacks. Optional to call, since disconnected clients are automatically unsubscribed.")]
    HRESULT Unsubscribe([in] IMyClient* client);
};

[uuid(46F3FEB2-121D-4830-AA22-0CDA9EA90DC3)]
library MyInterfaces {
    [uuid(AF080472-F173-4D9D-8BE7-435776617347)]
    coclass MyServer {
        [default] interface IMyServer;
        interface IClosable;
    }
}
